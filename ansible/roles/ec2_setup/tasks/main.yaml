---
- name: Update apt cache
  apt:
    update_cache: yes

- name: Install required packages
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - python3-pip
    state: present

- name: Install Docker
  apt:
    name: docker.io
    state: present

- name: Start and enable Docker service
  systemd:
    name: docker
    state: started
    enabled: yes

- name: Ensure unzip is installed
  become: yes
  apt:
    name: unzip
    state: present
    update_cache: yes


- name: Download AWS CLI v2 installer with curl
  become: yes
  shell: |
    curl -o /tmp/awscliv2.zip "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
  args:
    creates: /tmp/awscliv2.zip

- name: Unzip AWS CLI v2 installer
  become: yes
  unarchive:
    src: /tmp/awscliv2.zip
    dest: /tmp/
    remote_src: yes

- name: Install AWS CLI v2
  become: yes
  command: /tmp/aws/install
  args:
    creates: /usr/local/bin/aws


- name: Login to AWS ECR
  shell: |
    aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin 028892270743.dkr.ecr.{{ aws_region }}.amazonaws.com
  args:
    executable: /bin/bash

- name: Pull Docker images
  shell: |
    docker pull {{ item.image }}
  loop: "{{ docker_images }}"

- name: Stop and remove existing container if present
  shell: |
    if docker ps -a --format '{{.Names}}' | grep -w {{ item.container_name }}; then
      docker rm -f {{ item.container_name }}
    fi
  loop: "{{ docker_images }}"
  ignore_errors: yes

- name: Run Docker containers conditionally based on inventory hostname
  shell: |
    docker run -d --name {{ item.container_name }} -p {{ item.port }} {{ item.image }}
  when: >
    (inventory_hostname == groups['ec2_instances'][0] and item.container_name == 'container1') or
    (inventory_hostname == groups['ec2_instances'][1] and item.container_name == 'container2')
  loop: "{{ docker_images }}"
